
name: Deploy

on:
  pull_request:
    branches:
      - master

jobs:
  create:
    name: Create
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        category:
          - apple
          - orange
          - banana
    steps:
      - run: mkdir -p outputdata/${{matrix.category}}
      - run: |
          echo '{"changed_pct": 30, "category": "${{matrix.category}}"}' > outputdata/${{matrix.category}}/summary.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.3.3
        with:
          name: ${{ matrix.category }}
          path: |
            outputdata/${{ matrix.category }}
          if-no-files-found: warn
          retention-days: 3

  validate:
    name: Validate
    runs-on: ubuntu-latest
    needs: create
    outputs:
      summaries: ${{ steps.summaries.outputs.summaries }}
      categories: ${{ steps.summaries.outputs.categories }}
      environment: ${{ steps.summaries.outputs.environment }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          path: outputdata
      
      - name: Combined summary
        uses: actions/github-script@v7.0.1
        id: summaries
        with:
          script: |
            const fs = require('fs');
            const summaries = {};
            let environment = "";
            const subDirectories = fs.readdirSync("outputdata", { withFileTypes: true })
                .filter(entry => entry.isDirectory())
                .map(entry => entry.name)

            for (const directory of subDirectories) {
              const parsed = JSON.parse(fs.readFileSync(`outputdata/${directory}/summary.json`))
              
              if (parsed.changed_pct >= 25) {
                core.warning(`${directory} changed ${parsed.changed_pct}%!`)
                environment = "verify"
              }

              summaries[directory] = JSON.parse(fs.readFileSync(`outputdata/${directory}/summary.json`));
            }

            core.summary.addCodeBlock(JSON.stringify(summaries, null, 4), "json")
            core.summary.write()
            core.setOutput("categories", JSON.stringify(Object.keys(summaries)))
            core.setOutput("summaries", JSON.stringify(summaries))
            core.setOutput("environment", environment)
            


  use:
    name: "[[${{ matrix.category }}]]Use (${{ needs.validate.outputs.environment }})"
    runs-on: ubuntu-latest
    needs: validate 
    environment: ${{ needs.validate.outputs.environment }}
    strategy:
      matrix:
        category: ${{ fromJson(needs.validate.outputs.categories) }}
    steps:
      - run: |
          echo "${{ toJson(fromJson(needs.validate.outputs.summaries)[matrix.category]) }}"
      